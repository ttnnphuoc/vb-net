<?xml version="1.0"?>
<doc>
<assembly>
<name>
CoreLibrary
</name>
</assembly>
<members>
<member name="P:CoreLibrary.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:CoreLibrary.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:CoreLibrary.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
 the connection string
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
 using the provided parameters
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>An int representing the number of rows affected by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commentText">The stored procedure name or T-SQL command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
 </remarks>
	<param name="connection">A valid SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
 the connection string. 
 </summary>
	<remarks>
 e.g.:  
  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commentText">The stored procedure name or T-SQL command</param>
	<returns>A dataset containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
	<summary>
 This method is used to attach array of SqlParameters to a SqlCommand.

 This method will assign a value of DbNull to any parameter with a direction of
 InputOutput and a value of null.  
 
 This behavior will prevent default values from being used, but
 this will be the less common case than an intended pure output parameter (derived as InputOutput)
 where the user provided no input value.
 </summary>
	<param name="command">The command to which the parameters will be added</param>
	<param name="commandParameters">An array of SqlParameters to be added to command</param>
</member><member name="M:CoreLibrary.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
	<summary>
 This method assigns dataRow column values to an array of SqlParameters
 </summary>
	<param name="commandParameters">Array of SqlParameters to be assigned values</param>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
	<summary>
 Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
 the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
 stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
 </summary>
	<remarks>
 This method provides no access to output parameters or the stored procedure's return value parameter.

 e.g.:  
  SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="spName">The name of the stored procedure</param>
	<param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
	<returns>A SqlDataReader containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
	<summary>
 Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
 the connection string. 
 </summary>
	<remarks>
 e.g.:  
  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<returns>A SqlDataReader containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
 using the provided parameters.
 </summary>
	<remarks>
 e.g.:  
  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParamters used to execute the command</param>
	<returns>A SqlDataReader containing the resultset generated by the command</returns>
</member><member name="M:CoreLibrary.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],CoreLibrary.SqlHelper.SqlConnectionOwnership)">
	<summary>
 Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
 </summary>
	<remarks>
 If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
 
 If the caller provided the connection, we want to leave it to them to manage.
 </remarks>
	<param name="connection">A valid SqlConnection, on which to execute this command</param>
	<param name="transaction">A valid SqlTransaction, or 'null'</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
	<param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
	<returns>SqlDataReader containing the results of the command</returns>
</member><member name="T:CoreLibrary.SqlHelper.SqlConnectionOwnership">
	<summary>
 This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
 we can set the appropriate CommandBehavior when calling ExecuteReader()
 </summary>
</member><member name="M:CoreLibrary.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
	<summary>
 This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
 to the provided command
 </summary>
	<param name="command">The SqlCommand to be prepared</param>
	<param name="connection">A valid SqlConnection, on which to execute this command</param>
	<param name="transaction">A valid SqlTransaction, or 'null'</param>
	<param name="commandType">The CommandType (stored procedure, text, etc.)</param>
	<param name="commandText">The stored procedure name or T-SQL command</param>
	<param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
	<param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
</member><member name="M:CoreLibrary.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
	<summary>
 Retrieves the set of SqlParameters appropriate for the stored procedure
 </summary>
	<remarks>
 This method will query the database for this information, and then store it in a cache for future requests.
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="spName">The name of the stored procedure</param>
	<returns>An array of SqlParameters</returns>
</member><member name="M:CoreLibrary.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
	<summary>
 Retrieves the set of SqlParameters appropriate for the stored procedure
 </summary>
	<remarks>
 This method will query the database for this information, and then store it in a cache for future requests.
 </remarks>
	<param name="connectionString">A valid connection string for a SqlConnection</param>
	<param name="spName">The name of the stored procedure</param>
	<param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
	<returns>An array of SqlParameters</returns>
</member><member name="M:CoreLibrary.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
	<summary>
 Deep copy of cached SqlParameter array
 </summary>
	<param name="originalParameters"></param>
	<returns></returns>
</member><member name="M:CoreLibrary.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
	<summary>
 Retrieves the set of SqlParameters appropriate for the stored procedure
 </summary>
	<param name="connection">A valid SqlConnection object</param>
	<param name="spName">The name of the stored procedure</param>
	<param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
	<returns>An array of SqlParameters</returns>
</member><member name="M:CoreLibrary.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
	<summary>
 Resolve at run time the appropriate set of SqlParameters for a stored procedure
 </summary>
	<param name="connection">A valid SqlConnection object</param>
	<param name="spName">The name of the stored procedure</param>
	<param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
	<returns>The parameter array discovered.</returns>
</member><member name="T:CoreLibrary.SqlHelperParameterCache">
	<summary>
 SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
 ability to discover parameters for stored procedures at run-time.
 </summary>
</member>
</members>
</doc>